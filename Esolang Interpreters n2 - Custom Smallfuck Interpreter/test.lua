local bst = require 'busted'
local describe = bst.describe
local assert = bst.assert
local it = bst.it

local solution = require 'solution'
function test(desc, code, tape, result)
    it(desc, function()
        assert.are.same(result, solution(code, tape))
    end)
end

describe("Should work for some example test cases", function()
    -- Flips the leftmost cell of the tape
    test("Flips the leftmost cell of the tape", "*", "00101100", "10101100")
    -- Flips the second and third cell of the tape
    test("Flips the second and third cell of the tape", ">*>*", "00101100", "01001100")
    -- Flips all the bits in the tape
    test("Flips all the bits in the tape", "*>*>*>*>*>*>*>*", "00101100", "11010011")
    -- Flips all the bits that are initialized to 0
    test("Flips all the bits that are initialized to 0", "*>*>>*>>>*>*", "00101100", "11111111")
    -- Goes somewhere to the right of the tape and then flips all bits that are initialized to 1, progressing leftwards through the tape
    test(
        "Goes somewhere to the right of the tape and then flips all bits that are initialized to 1, progressing leftwards through the tape",
        ">>>>>*<*<<*", "00101100", "00000000")
    test("Your interpreter should evaluate a simple non-nested loop properly", "*[>*]",
        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")
    test("Should panic out of bounds", "<<<<<", "000", "000")
    test("Your interpreter should also work properly with nested loops", "*[>[*]]",
        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    test(
        '"Your interpreter should jump to the matching "]" when it encounters a "[" and the bit under the pointer is 0"',
        "[>*]",
        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
end)
